{"name":"Jchat","tagline":"A java chat client implementation recovered from my time at Swansea University.","body":"# JChat System\r\n\r\nThis is a chat system in Java which I created for a third year University module.  It makes use of Java WebService libraries.\r\n\r\nNB: This implementation of a chat server does **_not_** use Glassfish.\r\nOnly the command line is required to compile and run the program.\r\n\r\n## Running the Server\r\n1. Open a command prompt.\r\n2. Navigate to the directory containing **“JChatServer”** and **“JChatClient”**.\r\n3. Compile the server with **javac JChatServer/*.java**.\r\n4. Run the server with **java JChatServer.Server**\r\n\ta. You may run this in the background using **JChatServer.Server &**.\r\n\r\n## Running the Client\r\n1. Open a command prompt.\r\n2. Navigate to the directory containing **JChatServer** and **JChatClient** directories.\r\n3. Compile the client with **javac JChatClient/*.java**.\r\n4. Run the client with **java JChatClient.Client**\r\n\ta. You may run this in the background, using **java JChatClient.Client &**.\r\n\r\n## Features\r\n* Three user levels: GUEST, USER and ADMIN.\r\n..*GUEST only allows read access.\r\n..*USER allows read and write access.\r\n..*ADMIN allows read and write access along with admin commands.\r\n* Automatic termination of idle clients (if a client is idle for 2 minutes).\r\n* Security token for clients!\r\n..* Upon connection, clients give the server a unique pass-phrase and the server gives the client a unique ID. \r\nBoth pieces of information are required to ensure that the client is who we expect for any future interactions with the server.\r\n* Endless list of client commands.\r\n* Ability to change nickname on the fly.\r\n* Ability to send private messages.\r\n* Automatic reconnect of client when server “goes away”.\r\n* Colour coded user list for easy identification of user groups.\r\n* Colour coded messages for easier reading.  \r\n\r\n\r\n## / Commands\r\nThe following commands can be executed by clients.\r\n**NB**: Parameters surrounded by **<> are required**; Parameters surrounded by *[] are optional*.\r\n\r\n#### /nick *<username>*\r\nChange *your* username to <username>.  If it’s not available, _x (where x is an integer) will be appended to the end of the username.\r\n\r\n###### Example\r\n/nick Anthony\r\nServer: Guest has changed his/her display name to Anthony.\r\n\r\n#### /msg *<username> <message>*\r\nSend a private message to <username>.  If the user doesn’t exist, an error is given.\r\nAliases of this command are: /m /pm\r\n\r\n###### Example\r\n/pm TestDummy This is a test message.\r\nPrivate message from Anthony: This is a test message [Only seen by TestDummy]\r\n\r\n#### /me *<action>*\r\nSends an action message to the chat room!\r\n\r\n###### Example\r\n/me is writing the chat room documentation.\r\n* Anthony is writing the chat room documentation.\r\n\r\n#### /auth *<password> *[flags]*\r\nAuthenticates *you* as an admin on the server - password is samaria.\r\n\r\n##### Optional Flags\r\nQ – Doesn’t announce to the channel that you have been upgraded to admin.\r\n\r\n###### Example 1\r\n/auth samaria\r\nServer: User 'Anthony' is now an admin.\r\n\r\n###### Example 2\r\n/auth samaria Q\r\nPrivate message from Server: You are now an admin.\r\n\r\n#### /deauth *[username]*\r\nIf no username is given, de-authenticates *you* as an administrator of the server.\r\n\r\n##### Optional username\r\nWhen a username is given, that user is de-authenticated as an admin of the server.\r\n\r\n###### Example 1\r\n/deauth\r\nServer: User 'Anthony' is no longer an admin.\r\n\r\n###### Example 2\r\n/deauth TestDummy\r\nServer: User ‘TestDummy’ is no longer an admin.\r\n\r\n#### /warn *<username> <reason>*\r\nProvides a warning to a user, with any reason you specify.\r\n\r\n###### Example\r\n/warn TestDummy We are testing.\r\n*** Anthony gave you a warning: We are testing. [Only seen by TestDummy]\r\n\r\n\r\n#### /kick *<username> <reason>*\r\nForcefully removes the given user from the server, with a reason.\r\n\r\n###### Example\r\n/kick TestDummy We warned you.\r\nServer: TestDummy has been kicked by Anthony\r\n*** Anthony has kicked you because: We warned you! [Only seen by TestDummy]\r\nServer: TestDummy has quit :(\r\n\r\n#### /silence *<username>*\r\nSilence a user by demoting them to GUEST status.\r\n\r\n###### Example\r\n/silence TestDummy\r\nServer: User 'TestDummy' has been silenced.\r\nServer: You are only a guest; guests cannot speak. [Only seen by TestDummy when he tries to send a message]\r\n\r\n#### /unsilence *<username>*\r\nAllow a user to speak by promoting them to USER status.\r\n\r\n###### Example\r\n/unsilence TestDummy\r\nServer: User 'TestDummy' is allowed to talk again.\r\n\r\n#### /setserver *<key> <value>*\r\nSet a server setting (key) to the given value.\r\n\r\n###### Example\r\n/setserver name This is my server!\r\nPrivate message from Server: Server name set to 'This is my server!'. [All clients will then be updated]\r\n","google":"UA-53881253-1","note":"Don't delete this file! It's used internally to help with page regeneration."}